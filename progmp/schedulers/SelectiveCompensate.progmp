SCHEDULER SelectiveCompensate;

VAR sbfCandidates = SUBFLOWS.FILTER(sbf => sbf.CWND > sbf.SKBS_IN_FLIGHT + sbf.QUEUED 
    AND !sbf.THROTTLED AND !sbf.LOSSY);
IF(sbfCandidates.EMPTY) { RETURN; }

IF (!RQ.EMPTY) { 
    VAR sbfCandidate = sbfCandidates.FILTER(sbf => sbf.HAS_WINDOW_FOR(RQ.TOP) 
        AND !RQ.TOP.SENT_ON(sbf)).MIN(sbf => sbf.RTT); 
    IF (sbfCandidate != NULL) { 
        sbfCandidate.PUSH(RQ.POP()); 
        RETURN; 
    } 
} 

IF (!Q.EMPTY) { 
    sbfCandidates.FILTER(sbf => sbf.HAS_WINDOW_FOR(Q.TOP)).MIN(sbf => sbf.RTT).PUSH(Q.POP()); 
}

VAR minRttRatio = 2;

IF(R1 == 1 AND Q.EMPTY) {
  VAR bestSbf = sbfCandidates.MIN(sbf => sbf.RTT);
  VAR sbfsToCompensate = SUBFLOWS.FILTER(sbf => sbf.RTT > bestSbf.RTT * minRttRatio);

  /* packet not on bestSbf but sent on at least one sbfToCompensate */
  VAR skbCandidate = QU.FILTER(skb => !skb.SENT_ON(bestSbf) AND !sbfsToCompensate.FILTER(sbf => skb.SENT_ON(sbf)).EMPTY).GET(0);
	
  bestSbf.PUSH(skbCandidate);
}